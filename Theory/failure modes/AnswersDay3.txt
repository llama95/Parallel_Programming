1. -race conditions- 2 threads are operating on some piece of memory without proper synchronization. Since the threads are operating on pieces of data with improper synchronization, the data will print to the console in an order that was incorrect/not intended by the code developer. 
-strangled scaling- A lock creates an unnecessary bottle neck because the lock doesnâ€™t fully do its job, making the program serial. This will still give the person running the code the correct output, but serious speed problems will be evident because the lock is not being used in the proper manner, creating a bottleneck of task executions.
-deadlocks- Due to the held/required locks, no thread can make progress on the execution of a task. This pitfall is easier to detect, the program will come to a halt because of the lack of thread progress on any tasks.
2. Load imbalance is the uneven distribution of work across workers. Load imbalance does indeed complicate the way we might model parallel performance because it requires us to mitigate the imbalance via overdecomposition, the act of dividing the work into more tasks than there are workers. 
3. A race condition is expected to output data in an improper order because multiple threads are operating on memory with improper synchronization.
4. Wed know if the program is deadlocked because the running of the code would come to a halt. 